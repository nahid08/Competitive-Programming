vector<pair<ll,ll> >adj[ma];
ll sub[ma],t,mark[ma],b[ma],d[ma][22],le[ma];
vector<ll>e[ma],e1[ma];

void dfs(ll u, ll par)
{
    t++;
    sub[u]=1;
    for(auto x:adj[u])
    {
        if(x.ff==par||mark[x.ff])continue;
        dfs(x.ff,u);
        sub[u]+=sub[x.ff];
    }
}

ll fin(ll u,ll par)
{
    for(auto x:adj[u])
    {
        if(x.ff==par||mark[x.ff])continue;
        if(sub[x.ff]>t/2)return fin(x.ff,u);
    }
    return u;
}

void cal(ll u,ll par,ll lev,ll c)
{
    ll cost=d[u][lev];
    e[c].pb(cost);
    if(b[c]!=-1)e1[c].pb(d[u][le[b[c]]]);
    for(auto x:adj[u])
    {
        if(x.ff==par||mark[x.ff])continue;
        d[x.ff][lev]=d[u][lev]+x.ss;
        cal(x.ff,u,lev,c);
    }
}

void centroid(ll u,ll par,ll lev)
{
    t=0;dfs(u,par);
    ll c=fin(u,par);
    mark[c]=1;
    b[c]=par;le[c]=lev;
    cal(c,par,lev,c);
    sort(e[c].begin(),e[c].end());
    sort(e1[c].begin(),e1[c].end());
    for (auto x:adj[c])
    {
        if(mark[x.ff])continue;
        centroid(x.ff,c,lev+1);
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    ll n,q,i,j,u,v,c,l;
    while(cin>>n>>q)
    {
        for(i=1;i<n;i++)
        {
            cin>>u>>v>>c;
            adj[u].pb(mk(v,c));
            adj[v].pb(mk(u,c));
        }
        centroid(1,-1,0);

        while(q--)
        {
            cin>>v>>l;
            ll t=v,ans=0,l1=l,tmp;
            while(1)
            {
                ans+=upper_bound(e[v].begin(),e[v].end(),l)-e[v].begin();
                tmp=v;v=b[v];
                if(v==-1)break;l=l1-d[t][le[v]];
                ans-=upper_bound(e1[tmp].begin(),e1[tmp].end(),l)-e1[tmp].begin();
            }
            cout<<ans<<endl;
        }


    }
    return 0;
}

