/*
Nahid Hossain
Jahangirnagar University
Roll:54
*/
#include<bits/stdc++.h>
#define ll          long long int
#define db          double
#define pf          printf
#define sf          scanf
#define ff          first
#define ss          second
#define clr         clear()
#define sz          size()
#define pb          push_back
#define mk          make_pair
#define pi          acos(-1)
#define inf         100000000000000000
#define mod         998244353
#define ull         unsigned long long int
#define f(i,k,n)    for(ll i=k;i<n;i++)
#define fr(i,n,k)   for(i=n;i>=k;i--)
#define ent(a)      scanf("%lld",&a)
#define ent2(a,b)   scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a)      memset(a,0,sizeof(a))
#define vec(v,s)    vector<ll>v[s]
#define arr(a,s)    ll a[s];
//#define check(n,pos) (n&(1<<pos))
//#define set(n,pos)  (n|(1<<pos))
//knight and king//
int dr[]={2, 2, -2, -2, 1, -1, 1, -1};
int dc[]={1,-1,  1, -1, 2,  2,-2, -2};
int dr1[]={0, 0, 0, 1, 1, 1, -1, -1, -1};
int dc1[]={-1,0, 1,-1, 0, 1, -1, 0,   1};
int dr2[]={0, 0, 1, -1};
int dc2[]={1,-1, 0,  0};
////////////////////////////
using namespace std;

#define ma 250005

vector<ll>order;
ll out[30],in[30];
ll a[30][30];
vector<string>w[30][30];
string t[1005];
stack<ll>s;
ll st,en;

////*******///////////////////////////////////////


/*An undirected graph has an Eulerian cycle if and
only if every vertex has even degree,
An undirected graph has an Eulerian trail if and
only if exactly zero or two vertices have odd degree
A directed graph has an Eulerian cycle if and only if every vertex has equal in degree and out degree
A directed graph has an Eulerian trail if and only if at most one vertex has (out-degree) − (in-degree) = 1,
at most one vertex has (in-degree) − (out-degree) = 1*/




///just find a normal cycle one by one
void findcircuit(ll u)
{
 ll i;
 for(i=0;i<26;i++)
 {
  while(a[u][i]>0)
  {
   a[u][i]--;
   findcircuit(i);
  }
 }
// cout<<u<<endl;
 s.push(u);
}


///find a euler circuit of the given graph and store
///the order of visiting node in other vector
void findeulercircuit()
{
 ll i,u=0;
 for(i=0;i<26;i++)
 {
  if(out[i]>0)
  {
   u=i;
   break;
  }
 }
 findcircuit(u);
 while(s.sz>0)
 {
  order.pb(s.top());
  s.pop();
 }

}
///we added a dummy edge to make circuit
///that dummy edge doesnot actually exist
///we need to convert the circuit to a euler path removing that dummy edge
void converteulerpath(ll st,ll en)
{
 vector<ll> tmp=order;
 order.clear();
 ll k=-1,i;
 for(i=0;i+1<tmp.sz;i++)
 {
  if(tmp[i]==en&&tmp[i+1]==st)
  {
   k=i;
  }
 }

 for(i=k+1;i<tmp.sz;i++)order.pb(tmp[i]);
 for(i=1;i<=k;i++)order.pb(tmp[i]);
}



////**********///////////////////



void clea()
{
 ll i,j;
 for(i=0;i<26;i++)for(j=0;j<26;j++)w[i][j].clr;
 mem(in);
 mem(out);
 mem(a);
 order.clr;
}



ll check(ll n)
{
 ll cn1,cn2,i;
 cn1=cn2=0;

 for(i=0;i<26;i++)
 {
  ll r=abs(in[i]-out[i]);
  if(r>1)return 0;
  if(r==0)continue;
  if(in[i]==out[i]+1)
  {
   cn1++;
   en=i;
  }
  else if(in[i]+1==out[i])
  {
   cn2++;
   st=i;
  }

 }

 if(cn1==cn2&&cn1==0)
 {
  findeulercircuit();
  if(order.sz!=n+1)return 0;
  return 1;
 }
 if(cn1==cn2&&cn1==1)
 {

  a[en][st]++;
  findeulercircuit();
  converteulerpath(st,en);
  if(order.sz!=n+1)return 0;
  return 1;
 }

 return 0;

}


