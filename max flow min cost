#include<bits/stdc++.h>
#define ll          long long int
#define db          double
#define pf          printf
#define sf          scanf
#define ff          first
#define ss          second
#define clr         clear()
#define sz          size()
#define pb          push_back
#define mk          make_pair
#define pi          acos(-1)
#define inf         123456789
#define mod          998244353


#define q(n)        q.push(n)
#define ull         unsigned long long int
#define f(i,k,n)    for(ll i=k;i<n;i++)
#define fr(i,n,k)   for(ll i=n;i>=k;i--)
#define ent(a)      scanf("%lld",&a)
#define ent2(a,b)   scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a)      memset(a,0,sizeof(a))
#define mem1(a)     memset(a,-1,sizeof(a))
#define vec(v,s)    vector<ll>v[s]
#define arr(a,s)    ll a[s]
//#define check(n,pos) (n&(1<<pos))
//#define set(n,pos)  (n|(1<<pos))
//knight and king//
int dr[]={2,2,-2,-2,1,-1,1,-1};
int dc[]={1,-1,1,-1,2,2,-2,-2};
int dr1[]={0,0,1,1,1,-1,-1,-1};
int dc1[]={1,-1,1,0,-1,0,1,-1};
int dr2[]={0,0,1,-1};
int dc2[]={1,-1,0,0};
////////////////////////////
using namespace std;
#define ma 505


struct edge{
 ll a,b,f,c,cost;

};


vector<ll>adj[ma];
vector<edge>e;
ll s,t,flow,cost;
ll a[ma],p[ma],d[ma],inq[ma];

void add_edge(ll a,ll b,ll cap,ll cost)
{
 edge e1={a,b,0,cap,cost};
 adj[a].pb(e.sz);
 e.pb(e1);
 e1={b,a,0,0,-cost};
 adj[b].pb(e.sz);
 e.pb(e1);

}


bool spfa( )
{
 ll i;

 for(i=0;i<=t;i++)d[i]=inf,inq[i]=0;
 queue<ll>q;
 q.push(s);
 inq[s]=1,d[s]=0,p[s]=0,a[s]=inf;
 while(q.sz>0)
 {
  ll u=q.front();
  q.pop();

  inq[u]=0;
  for(i=0;i<adj[u].sz;i++)
  {
   ll id=adj[u][i];
   ll v=e[id].b;
   if(d[v]>d[u]+e[id].cost&&e[id].f<e[id].c)
   {
    d[v]=d[u]+e[id].cost;
    p[v]=adj[u][i];
    a[v]=min(a[u],e[id].c-e[id].f);
    if(inq[v]==0)
    {
     inq[v]=1;
     q.push(v);
    }
   }

  }

 }







 if(d[t]==inf)return 0;
 flow+=a[t];
 cost+=d[t];
  ll u=t;
 while(u!=s)
 {
  ll r=p[u];
  e[r].f+=a[t];
  e[r^1].f-=a[t];
  u=e[r].a;
 }


 return 1;
}




ll mincost()
{
 while(spfa());
 return cost;
}

int main()
{
 ll n,i,j,x,tc,cas=0;
 ent(tc);
 while(tc--)
 {
  ent(n);
  ll in[n+5],out[n+5];
  for(i=1;i<=n;i++)
  {
   in[i]=n+i;
   out[i]=n+n+i;
  }
  s=0,t=3*n+1;

  for(i=1;i<=n;i++)add_edge(0,i,1,0);
  for(i=1;i<=n;i++)add_edge(in[i],out[i],1,0);
  for(i=1;i<=n;i++)add_edge(out[i],t,1,0);

  for(i=1;i<=n;i++)
  {
   for(j=1;j<=n;j++)
   {
    cin>>x;
    add_edge(i,in[j],1,-x);
   }
  }
  flow=cost=0;


  ll ans=mincost();
  cost*=(-1);
  pf("Case %lld: %lld\n",++cas,cost);

  f(i,0,ma)adj[i].clr;
  e.clr;

 }


 return 0;
}
