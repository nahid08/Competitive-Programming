ll pos[10005],sa[10005],gap,n,tmp[10005],lcp[10005];
string t;
 
 
bool sufcmp(ll i,ll j)
{
 if(pos[i]!=pos[j])
  return pos[i]<pos[j];
 i+=gap;
 j+=gap;
 return (i<n&&j<n)?pos[i]<pos[j]:i>j;
}
 
 
 
void buildsa()
{
 n=t.sz;
 ll i;
 f(i,0,n)sa[i]=i,pos[i]=t[i];
 for(gap=1;gap<=n;gap*=2)
 {
  sort(sa,sa+n,sufcmp);
  for(i=0;i+1<n;i++)tmp[i+1]=tmp[i]+sufcmp(sa[i],sa[i+1]);
  for(i=0;i<n;i++)pos[sa[i]]=tmp[i];
  if(tmp[n-1]==n-1)break;
 }
 
 
 
 
}
void lcp1()
{
 ll i,j,k;
 for(i=0,k=0;i<n;++i,k?k--:0)
 {
  if(pos[i]==n-1)continue;
  j=sa[pos[i]+1];
  while(i+k<n&&j+k<n&&t[i+k]==t[j+k])k++;
  lcp[pos[i]]=k;
 
 }
 
 
}
int main()
{
 ll tc,cas=0,i,j,ans,p,q;
 ent(tc);
 while(tc--)
 {
  cin>>t;
  ent2(p,q);
  buildsa();
  lcp1();
  ans=0;
  ll k=0;
  f(i,0,t.sz)
  {
   k=min(n-sa[i],q)-max(p-1,lcp[i]);
   if(k>0)ans+=k;
  }
  pf("Case %lld: %lld\n",++cas,ans);
  mem(sa);
  mem(pos);
  mem(lcp);
  mem(tmp);
 
 
 
 }
 return 0;
}
